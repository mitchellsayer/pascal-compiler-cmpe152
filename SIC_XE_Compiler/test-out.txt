
Parsing Pass: There were no syntax errors.

Parse tree (Lisp format):
(program (programHeader PROGRAM (programIdentifier test) ;) (block (declarations (variablesPart VAR (variableDeclarationsList (variableDeclarations (variableIdentifierList (variableIdentifier alpha)) : (typeSpecification (simpleType (typeIdentifier INTEGER)))) ; (variableDeclarations (variableIdentifierList (variableIdentifier beta)) : (typeSpecification (simpleType (typeIdentifier REAL)))) ; (variableDeclarations (variableIdentifierList (variableIdentifier result)) : (typeSpecification (simpleType (typeIdentifier REAL)))))) ; (routinesPart (routineDefinition (functionHead FUNCTION (routineIdentifier add) (parameters ( (parameterDeclarationsList (parameterDeclarations (parameterIdentifierList (parameterIdentifier a)) : (typeIdentifier INTEGER)) ; (parameterDeclarations (parameterIdentifierList (parameterIdentifier b)) : (typeIdentifier REAL))) )) : (typeIdentifier REAL)) ; (block (declarations (variablesPart VAR (variableDeclarationsList (variableDeclarations (variableIdentifierList (variableIdentifier temp)) : (typeSpecification (simpleType (typeIdentifier REAL)))))) ;) (compoundStatement BEGIN (statementList (statement (assignmentStatement (lhs (variable (variableIdentifier add))) := (rhs (expression (simpleExpression (term (factor (variable (variableIdentifier a)))) (addOp +) (term (factor (variable (variableIdentifier b)))) (addOp +) (term (factor (variable (variableIdentifier temp))))))))) ; (statement emptyStatement)) END)))) ;) (compoundStatement BEGIN (statementList (statement (assignmentStatement (lhs (variable (variableIdentifier alpha))) := (rhs (expression (simpleExpression (term (factor (number (unsignedNumber (integerConstant 88)))))))))) ; (statement (assignmentStatement (lhs (variable (variableIdentifier beta))) := (rhs (expression (simpleExpression (term (factor (number (unsignedNumber (realConstant 99.9)))))))))) ; (statement (assignmentStatement (lhs (variable (variableIdentifier result))) := (rhs (expression (simpleExpression (term (factor (functionCall (functionName add) ( (argumentList (argument (expression (simpleExpression (term (factor (variable (variableIdentifier alpha))))))) , (argument (expression (simpleExpression (term (factor (variable (variableIdentifier beta)))))))) ))))))))) ; (statement emptyStatement)) END)) .)

Semantic Pass:

===== SYMBOL TABLE & TYPE INFO =====

*** PROGRAM test ***

Identifier       Line numbers    Type specification
----------       ------------    ------------------
add             
                                 Defined as: FUNCTION
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = real
alpha            004 016 018
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = integer
beta             005 017 018
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = real
result           006 018
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = real

*** FUNCTION add ***

Identifier       Line numbers    Type specification
----------       ------------    ------------------
a                008 012
                                 Defined as: value parameter
                                 Scope nesting level: 2
                                 Type form = scalar, Type id = integer
add              012
                                 Defined as: variable
                                 Scope nesting level: 2
                                 Type form = scalar, Type id = real
b                008 012
                                 Defined as: value parameter
                                 Scope nesting level: 2
                                 Type form = scalar, Type id = real
temp             010 012
                                 Defined as: variable
                                 Scope nesting level: 2
                                 Type form = scalar, Type id = real
There were no semantic errors.

PASS 3 Compilation: ProgramName: test
visitProgram
emitProgram
emitProgramVariables
emitSubroutines
visitRoutineDefinition
emitRoutine
emitRoutineLocals
visitStatement
visitAssignmentStatement
emitAssignment
visitExpression
emitExpression
emitSimpleExpression
emitTerm
visitVariableFactor
emitLoadVariable
emitTerm
visitVariableFactor
emitLoadVariable
emitTerm
visitVariableFactor
emitLoadVariable
visitStatement
emitMainMethod
visitStatement
visitAssignmentStatement
emitAssignment
visitExpression
emitExpression
emitSimpleExpression
emitTerm
visitNumberFactor
emitLoadIntegerConstant
visitStatement
visitAssignmentStatement
emitAssignment
visitExpression
emitExpression
emitSimpleExpression
emitTerm
visitNumberFactor
emitLoadRealConstant
visitStatement
visitAssignmentStatement
emitAssignment
visitExpression
emitExpression
emitSimpleExpression
emitTerm
visitFunctionCallFactor
emitFunctionCall
visitStatement
0x7fd250c368a0
